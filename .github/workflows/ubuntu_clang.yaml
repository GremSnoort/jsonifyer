name: Clang Builds
on:
  workflow_run:
    workflows: [GCC Builds]
    types:
      - completed

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        cxx_standard: [17]
        build_type: ["Release", "Debug"]
        configuration: [
          {"UBUNTU_VERSION":"18.04", "UBUNTU_RELEASE":"bionic", "TOOLCHAIN_VERSION":"6.0"},
          {"UBUNTU_VERSION":"18.04", "UBUNTU_RELEASE":"bionic", "TOOLCHAIN_VERSION":"7"},
          {"UBUNTU_VERSION":"18.04", "UBUNTU_RELEASE":"bionic", "TOOLCHAIN_VERSION":"8"},
          {"UBUNTU_VERSION":"18.04", "UBUNTU_RELEASE":"bionic", "TOOLCHAIN_VERSION":"9"},
          {"UBUNTU_VERSION":"18.04", "UBUNTU_RELEASE":"bionic", "TOOLCHAIN_VERSION":"10"},
          {"UBUNTU_VERSION":"18.04", "UBUNTU_RELEASE":"bionic", "TOOLCHAIN_VERSION":"11"},
          {"UBUNTU_VERSION":"18.04", "UBUNTU_RELEASE":"bionic", "TOOLCHAIN_VERSION":"12"},
          {"UBUNTU_VERSION":"18.04", "UBUNTU_RELEASE":"bionic", "TOOLCHAIN_VERSION":"13"},
          {"UBUNTU_VERSION":"18.04", "UBUNTU_RELEASE":"bionic", "TOOLCHAIN_VERSION":"14"},
          {"UBUNTU_VERSION":"18.04", "UBUNTU_RELEASE":"bionic", "TOOLCHAIN_VERSION":"15"},
          {"UBUNTU_VERSION":"18.04", "UBUNTU_RELEASE":"bionic", "TOOLCHAIN_VERSION":"16"},

          {"UBUNTU_VERSION":"20.04", "UBUNTU_RELEASE":"focal", "TOOLCHAIN_VERSION":"9"},
          {"UBUNTU_VERSION":"20.04", "UBUNTU_RELEASE":"focal", "TOOLCHAIN_VERSION":"10"},
          {"UBUNTU_VERSION":"20.04", "UBUNTU_RELEASE":"focal", "TOOLCHAIN_VERSION":"11"},
          {"UBUNTU_VERSION":"20.04", "UBUNTU_RELEASE":"focal", "TOOLCHAIN_VERSION":"12"},
          {"UBUNTU_VERSION":"20.04", "UBUNTU_RELEASE":"focal", "TOOLCHAIN_VERSION":"13"},
          {"UBUNTU_VERSION":"20.04", "UBUNTU_RELEASE":"focal", "TOOLCHAIN_VERSION":"14"},
          {"UBUNTU_VERSION":"20.04", "UBUNTU_RELEASE":"focal", "TOOLCHAIN_VERSION":"15"},
          {"UBUNTU_VERSION":"20.04", "UBUNTU_RELEASE":"focal", "TOOLCHAIN_VERSION":"16"},

          {"UBUNTU_VERSION":"22.04", "UBUNTU_RELEASE":"jammy", "TOOLCHAIN_VERSION":"13"},
          {"UBUNTU_VERSION":"22.04", "UBUNTU_RELEASE":"jammy", "TOOLCHAIN_VERSION":"14"},
#          {"UBUNTU_VERSION":"22.04", "UBUNTU_RELEASE":"jammy", "TOOLCHAIN_VERSION":"15"},
          {"UBUNTU_VERSION":"22.04", "UBUNTU_RELEASE":"jammy", "TOOLCHAIN_VERSION":"16"}
        ]

    runs-on: ubuntu-latest
    container:
      image: ubuntu:${{matrix.configuration.UBUNTU_VERSION}}

    steps:
      - name: Install system dependencies before checkout
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt update
          apt-get install -y \
            software-properties-common ca-certificates \
            ninja-build make \
            python3-pip python3 python3-dev python3-setuptools \
            zlib1g-dev wget

          add-apt-repository ppa:ubuntu-toolchain-r/test
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir conan==1.59 cmake 

          add-apt-repository ppa:git-core/ppa
          apt update && apt install -y git
          git --version

      - uses: actions/checkout@v2

      - name: Install compiler
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
          add-apt-repository "deb http://apt.llvm.org/${{matrix.configuration.UBUNTU_RELEASE}}/ llvm-toolchain-${{matrix.configuration.UBUNTU_RELEASE}}-${{matrix.configuration.TOOLCHAIN_VERSION}} main"
          wget https://apt.llvm.org/${{matrix.configuration.UBUNTU_RELEASE}}/dists/llvm-toolchain-${{matrix.configuration.UBUNTU_RELEASE}}-${{matrix.configuration.TOOLCHAIN_VERSION}}/main/binary-amd64/Packages
          cat Packages \
            | grep -Po "^Package: [a-zA-Z0-9-.\+ ]+$" \
            | sed -e 's/Package:/ /g' \
            | sed -e 's/[+\.a-zA-Z0-9-]*wasm[+\.a-zA-Z0-9-]*$/ /g' \
            | sed -e 's/[+\.a-zA-Z0-9-]*-tools$/ /g' \
            | sed -e 's/[+\.a-zA-Z0-9-]*polly[+\.a-zA-Z0-9-]*$/ /g' \
            | sed -e 's/[+\.a-zA-Z0-9-]*python[+\.a-zA-Z0-9-]*$/ /g' \
            > pkglist

          cat pkglist
          apt update && apt-get install -y $(cat pkglist)

      - name: Configure CMake
        env:
          CC: clang-${{matrix.configuration.TOOLCHAIN_VERSION}}
          CXX: clang++-${{matrix.configuration.TOOLCHAIN_VERSION}}
          BUILD_TYPE: ${{matrix.build_type}}
          CXX_STANDARD: ${{matrix.cxx_standard}}
        run: |
          mkdir -p local_build
          conan install . --build=missing
          ls -la .
          cmake -B local_build -GNinja \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_CXX_STANDARD=${CXX_STANDARD} \
            -DCMAKE_C_COMPILER=${CC} \
            -DCMAKE_CXX_COMPILER=${CXX}

      - name: Build
        run: cmake --build local_build

      - name: Test
        working-directory: local_build
        run: ctest --rerun-failed --output-on-failure

      - name: Run benchmark
        run: |
          cd local_build/bin
          ./benchmark_process --benchmark_format=json | tee benchmark_process_result.json
          ./benchmark_serialize --benchmark_format=json | tee benchmark_serialize_result.json
          ./benchmark_parse --benchmark_format=json | tee benchmark_parse_result.json
          cd ../../ && echo ${PWD}
          git config --global --add safe.directory ${PWD}
          cat ~/.gitconfig

      - name: Store benchmark_process result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: 'Benchmark Serialize&Parse clang-${{matrix.configuration.TOOLCHAIN_VERSION}} ${{matrix.configuration.UBUNTU_VERSION}} ${{matrix.build_type}} c++-${{matrix.cxx_standard}}'
          tool: 'googlecpp'
          output-file-path: local_build/bin/benchmark_process_result.json
          benchmark-data-dir-path: dev/bench/clang_${{matrix.configuration.UBUNTU_VERSION}}_${{matrix.configuration.TOOLCHAIN_VERSION}}_${{matrix.build_type}}_${{matrix.cxx_standard}}/process
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

      - name: Store benchmark_serialize result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: 'Benchmark Serialize clang-${{matrix.configuration.TOOLCHAIN_VERSION}} ${{matrix.configuration.UBUNTU_VERSION}} ${{matrix.build_type}} c++-${{matrix.cxx_standard}}'
          tool: 'googlecpp'
          output-file-path: local_build/bin/benchmark_serialize_result.json
          benchmark-data-dir-path: dev/bench/clang_${{matrix.configuration.UBUNTU_VERSION}}_${{matrix.configuration.TOOLCHAIN_VERSION}}_${{matrix.build_type}}_${{matrix.cxx_standard}}/serialize
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

      - name: Store benchmark_parse result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: 'Benchmark Parse clang-${{matrix.configuration.TOOLCHAIN_VERSION}} ${{matrix.configuration.UBUNTU_VERSION}} ${{matrix.build_type}} c++-${{matrix.cxx_standard}}'
          tool: 'googlecpp'
          output-file-path: local_build/bin/benchmark_parse_result.json
          benchmark-data-dir-path: dev/bench/clang_${{matrix.configuration.UBUNTU_VERSION}}_${{matrix.configuration.TOOLCHAIN_VERSION}}_${{matrix.build_type}}_${{matrix.cxx_standard}}/parse
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
